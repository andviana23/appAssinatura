Bora simplificar a vida do cliente e a sua, implementando essa integra√ß√£o de Checkout do Asaas com assinatura recorrente de forma r√°pida e segura. Siga este passo a passo para o Replit:

Criar fun√ß√£o para gerar Checkout Recorrente

No seu projeto Node.js/Express, crie um arquivo (por exemplo, asaasCheckout.js) ou adicione em algum m√≥dulo de pagamentos.

Essa fun√ß√£o ser√° chamada sempre que um cliente decidir assinar um plano.

Configurar vari√°veis de ambiente

No Replit, v√° em ‚ÄúSecrets‚Äù (Vari√°veis de Ambiente) e crie:

ASAAS_API_KEY = sua API Key de produ√ß√£o do Asaas

BASE_URL = https://seusite.com (dom√≠nio que usar√° nos callbacks)

Garanta que o projeto esteja rodando em HTTPS no seu dom√≠nio de produ√ß√£o.

Implementar payload sem CPF no seu sistema

Dentro da fun√ß√£o de cria√ß√£o de checkout, monte o payload JSON sem o campo cpfCnpj.

Apenas inclua:

js
Copiar
Editar
{
  billingTypes: ["CREDIT_CARD"],
  chargeTypes: ["RECURRENT"],
  minutesToExpire: 60, // expira em 1 hora se o cliente n√£o completar
  callback: {
    cancelUrl: `${process.env.BASE_URL}/pagamento/cancelado`,
    expiredUrl: `${process.env.BASE_URL}/pagamento/expirado`,
    successUrl: `${process.env.BASE_URL}/pagamento/sucesso`
  },
  items: [{
    description: dadosPlano.descricao,
    name: dadosPlano.nome,
    quantity: 1,
    value: parseFloat(dadosPlano.valor) // ex: 99.90
  }],
  customerData: {
    email: dadosCliente.email,
    name: dadosCliente.nome,
    phone: dadosCliente.telefone?.replace(/\D/g, '') || ""
    // N√ÉO ENVIE cpfCnpj aqui! Cliente preenche no checkout do Asaas
  },
  subscription: {
    cycle: "MONTHLY",
    endDate: dataUmAnoDepois(),      // ex: ‚Äú2026-12-31 23:59:59‚Äù
    nextDueDate: dataProximoMes()    // ex: ‚Äú2025-07-03 23:59:59‚Äù
  }
}
Crie fun√ß√µes utilit√°rias (ou use Date direto) para gerar nextDueDate e endDate conforme o plano (um m√™s e um ano a partir de hoje).

Fazer requisi√ß√£o √† API do Asaas

Use fetch ou axios no Replit para chamar:

yaml
Copiar
Editar
POST https://api.asaas.com/v3/checkout
Headers:
  access_token: process.env.ASAAS_API_KEY
  Content-Type: application/json
Body: JSON.stringify(payload)
Trate poss√≠veis erros (validacÃßaÃÉo do Asaas, problemas de rede). Se checkout.errors existir, retorne erro amig√°vel para o cliente.

Redirecionar cliente para o Checkout do Asaas

A resposta do Asaas vir√° com checkoutUrl.

No frontend (ou onde capturar o resultado), fa√ßa:

js
Copiar
Editar
const checkoutUrl = await criarCheckoutRecorrente(plano, cliente);
return checkoutUrl; // para onde o cliente ser√° redirecionado
No lado do frontend (React, Next.js, etc.), basta usar window.location.href = checkoutUrl;.

Configurar as rotas de callback no seu servidor

No server.js ou onde estiver seu Express, crie rotas:

js
Copiar
Editar
app.get('/pagamento/sucesso', (req, res) => {
  // exibe mensagem de sucesso, atualiza status da assinatura no seu banco
  res.send("Pagamento realizado com sucesso!");
});
app.get('/pagamento/cancelado', (req, res) => {
  // exibe p√°gina de cancelamento
  res.send("Voc√™ cancelou o pagamento.");
});
app.get('/pagamento/expirado', (req, res) => {
  // exibe p√°gina de expirado
  res.send("O checkout expirou. Tente novamente.");
});
Garanta que essas URLs estejam em HTTPS e correspondam exatamente ao que colocou no payload.

Configurar Webhooks do Asaas (opcional mas recomendado)

No painel do Asaas, cadastre a URL do seu webhook (ex: https://seusite.com/webhook/asaas).

No Replit, crie rota POST:

js
Copiar
Editar
app.post('/webhook/asaas', async (req, res) => {
  const evento = req.body.event;
  if (evento === "SUBSCRIPTION_CREATED") {
    // marque assinatura como ativa no seu banco
  }
  if (evento === "PAYMENT_CREATED") {
    // registro de nova fatura gerada
  }
  if (evento === "CHECKOUT_COMPLETED") {
    // apenas confirma√ß√£o de que o checkout rolou
  }
  res.status(200).send("OK");
});
Use express.json() para parsear o JSON do webhook. Teste localmente com ngrok ou Replit HTTPS.

Ajustar front-end para n√£o coletar CPF

Na p√°gina de checkout do seu site, colete apenas: nome, email, telefone.

Evite pedir CPF ali: informe ao cliente que ele preencher√° CPF no checkout do Asaas.

Remova valida√ß√µes de CPF do seu formul√°rio.

Testar fluxo completo no ambiente de produ√ß√£o

Use uma chave de produ√ß√£o v√°lida do Asaas.

Crie um plano de assinatura de teste (valor baixo) e fa√ßa um pagamento real com cart√£o.

Verifique no painel do Asaas: a assinatura criada, datas de cobran√ßa, valores.

Confira no seu pr√≥prio banco de dados se registrou corretamente SUBSCRIPTION_CREATED e PAYMENT_CREATED.

Pontos finais de revis√£o

üìå Certifique-se de que:

A API Key √© de produ√ß√£o e as URLs de callback est√£o em HTTPS.

O payload enviado segue exatamente o formato exigido (sem cpfCnpj).

O cliente √© redirecionado e preenche CPF + cart√£o na p√°gina do Asaas.

O webhook no seu Replit recebe e trata eventos corretamente.

üî• Teste casos de erro: CPF inv√°lido, cart√£o recusado, checkout expirado. O Asaas j√° mostrar√° erro no pr√≥prio formul√°rio.

üåê Disponibilize logs (console ou arquivo) pra monitorar falhas em produ√ß√£o.

Pr√≥ximos Passos para evolu√ß√£o

Depois que estiver funcionando:

Configure e-mails autom√°ticos de confirma√ß√£o de assinatura.

Exiba no painel interno do seu sistema o status da assinatura de cada cliente (‚Äúativo‚Äù, ‚Äúexpirado‚Äù, ‚Äúcancelado‚Äù).

Crie relat√≥rios mensais de faturamento recorrente.

Implemente rota para cancelar assinaturas (chamada PUT ou DELETE na API do Asaas).

