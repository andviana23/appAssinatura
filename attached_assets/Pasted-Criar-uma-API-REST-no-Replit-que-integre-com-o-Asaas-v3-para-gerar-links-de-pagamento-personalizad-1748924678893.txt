Criar uma API REST no Replit que integre com o Asaas (v3) para gerar links de pagamento personalizados de assinatura recorrente, corrigindo o problema de retorno HTML ao inv√©s de JSON.
Configura√ß√£o Inicial
1. Estrutura do Projeto
projeto/
‚îú‚îÄ‚îÄ index.js (arquivo principal)
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ .env (para vari√°veis de ambiente)
2. Depend√™ncias Necess√°rias
json{
  "name": "asaas-checkout-api",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "axios": "^1.6.0",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1"
  }
}
C√≥digo Completo da API
index.js
javascriptconst express = require('express');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middlewares
app.use(cors());
app.use(express.json());

// Token do Asaas (SUBSTITUA pelo seu token real)
const ASAAS_API_TOKEN = process.env.ASAAS_API_TOKEN || 'SEU_TOKEN_AQUI';
const ASAAS_BASE_URL = 'https://www.asaas.com/api/v3';

// Middleware para validar dados de entrada
const validatePaymentData = (req, res, next) => {
  const { name, description, value, subscriptionCycle } = req.body;
  
  if (!name || !description || !value || !subscriptionCycle) {
    return res.status(400).json({
      error: 'Dados obrigat√≥rios: name, description, value, subscriptionCycle'
    });
  }
  
  if (typeof value !== 'number' || value <= 0) {
    return res.status(400).json({
      error: 'O valor deve ser um n√∫mero maior que zero'
    });
  }
  
  const validCycles = ['WEEKLY', 'BIWEEKLY', 'MONTHLY', 'QUARTERLY', 'SEMIANNUALLY', 'YEARLY'];
  if (!validCycles.includes(subscriptionCycle)) {
    return res.status(400).json({
      error: `subscriptionCycle deve ser um dos valores: ${validCycles.join(', ')}`
    });
  }
  
  next();
};

// Endpoint principal para criar link de pagamento
app.post('/api/create-payment-link', validatePaymentData, async (req, res) => {
  try {
    const { name, description, value, subscriptionCycle } = req.body;
    
    // Payload EXATO para o Asaas
    const asaasPayload = {
      billingType: "CREDIT_CARD",
      chargeType: "RECURRENT", 
      name: name,
      description: description,
      value: parseFloat(value),
      subscriptionCycle: subscriptionCycle
    };
    
    console.log('üöÄ Enviando para Asaas:', JSON.stringify(asaasPayload, null, 2));
    
    // Configura√ß√£o da requisi√ß√£o para o Asaas
    const config = {
      method: 'POST',
      url: `${ASAAS_BASE_URL}/paymentLinks`,
      headers: {
        'Content-Type': 'application/json',
        'access_token': ASAAS_API_TOKEN,
        'User-Agent': 'ReplitApp/1.0'
      },
      data: asaasPayload,
      timeout: 10000, // 10 segundos
      validateStatus: function (status) {
        return status < 500; // Resolve apenas se n√£o for erro de servidor
      }
    };
    
    const response = await axios(config);
    
    console.log('üì• Status da resposta:', response.status);
    console.log('üì• Headers da resposta:', response.headers);
    
    // Verificar se a resposta √© JSON
    const contentType = response.headers['content-type'];
    if (!contentType || !contentType.includes('application/json')) {
      console.error('‚ùå Resposta n√£o √© JSON:', contentType);
      console.error('‚ùå Dados recebidos:', response.data);
      
      return res.status(502).json({
        error: 'Asaas retornou resposta inv√°lida (n√£o JSON)',
        status: response.status,
        contentType: contentType,
        data: typeof response.data === 'string' ? response.data.substring(0, 500) : response.data
      });
    }
    
    // Verificar se houve erro na API do Asaas
    if (response.status >= 400) {
      console.error('‚ùå Erro na API do Asaas:', response.data);
      return res.status(response.status).json({
        error: 'Erro na API do Asaas',
        asaasError: response.data
      });
    }
    
    // Sucesso - extrair o link de pagamento
    const { url: paymentUrl, id, object } = response.data;
    
    if (!paymentUrl) {
      console.error('‚ùå Link n√£o encontrado na resposta:', response.data);
      return res.status(502).json({
        error: 'Link de pagamento n√£o encontrado na resposta do Asaas',
        response: response.data
      });
    }
    
    console.log('‚úÖ Link criado com sucesso:', paymentUrl);
    
    // Retornar apenas o essencial
    res.json({
      success: true,
      paymentUrl: paymentUrl,
      linkId: id,
      message: 'Link de pagamento criado com sucesso'
    });
    
  } catch (error) {
    console.error('üí• Erro geral:', error.message);
    
    if (error.code === 'ECONNABORTED') {
      return res.status(504).json({
        error: 'Timeout na conex√£o com Asaas'
      });
    }
    
    if (error.response) {
      console.error('‚ùå Erro HTTP:', error.response.status);
      console.error('‚ùå Dados do erro:', error.response.data);
      
      return res.status(error.response.status).json({
        error: 'Erro na comunica√ß√£o com Asaas',
        status: error.response.status,
        message: error.response.data
      });
    }
    
    if (error.request) {
      console.error('‚ùå Sem resposta do servidor:', error.request);
      return res.status(503).json({
        error: 'Asaas n√£o respondeu'
      });
    }
    
    res.status(500).json({
      error: 'Erro interno do servidor',
      message: error.message
    });
  }
});

// Endpoint de teste para verificar se a API est√° funcionando
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    message: 'API funcionando',
    timestamp: new Date().toISOString()
  });
});

// Endpoint para testar conex√£o com Asaas
app.get('/api/test-asaas', async (req, res) => {
  try {
    const response = await axios.get(`${ASAAS_BASE_URL}/customers`, {
      headers: {
        'access_token': ASAAS_API_TOKEN,
        'Content-Type': 'application/json'
      },
      timeout: 5000
    });
    
    res.json({
      success: true,
      message: 'Conex√£o com Asaas OK',
      status: response.status
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Erro na conex√£o com Asaas',
      error: error.message
    });
  }
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`üöÄ Servidor rodando na porta ${PORT}`);
  console.log(`üîó Health check: http://localhost:${PORT}/api/health`);
  console.log(`üîó Test Asaas: http://localhost:${PORT}/api/test-asaas`);
  console.log(`üîó Create payment: POST http://localhost:${PORT}/api/create-payment-link`);
});
Arquivo .env
ASAAS_API_TOKEN=seu_token_real_aqui
PORT=3000
Como Resolver o Problema do HTML
Principais Causas e Solu√ß√µes:

Token Inv√°lido/Incorreto

‚úÖ Verifique se o token est√° correto no arquivo .env
‚úÖ Confirme se est√° usando o token de produ√ß√£o ou sandbox conforme necess√°rio


Headers Incorretos

‚úÖ Use access_token no header (n√£o Authorization)
‚úÖ Sempre inclua Content-Type: application/json


URL Incorreta

‚úÖ Confirme a URL: https://www.asaas.com/api/v3/paymentLinks
‚úÖ Para sandbox use: https://sandbox.asaas.com/api/v3/paymentLinks


Payload Malformado

‚úÖ Sempre envie n√∫meros como number, n√£o string
‚úÖ Verifique se todos os campos obrigat√≥rios est√£o presentes



Como Testar
1. Teste de Sa√∫de
bashGET http://localhost:3000/api/health
2. Teste de Conex√£o Asaas
bashGET http://localhost:3000/api/test-asaas
3. Criar Link de Pagamento
bashPOST http://localhost:3000/api/create-payment-link
Content-Type: application/json

{
  "name": "Assinatura Gold",
  "description": "Acesso premium mensal",
  "value": 97.90,
  "subscriptionCycle": "MONTHLY"
}
Exemplo de Resposta Esperada
json{
  "success": true,
  "paymentUrl": "https://www.asaas.com/c/1234567890",
  "linkId": "pay_1234567890",
  "message": "Link de pagamento criado com sucesso"
}
Logs de Debug
O c√≥digo inclui logs detalhados para identificar problemas:

üöÄ Dados enviados para Asaas
üì• Status e headers da resposta
‚úÖ Sucesso na cria√ß√£o
‚ùå Erros detalhados

Checklist Final

 Token do Asaas configurado corretamente
 Depend√™ncias instaladas (npm install)
 Servidor iniciado (npm start)
 Teste de health funcionando
 Teste de conex√£o Asaas funcionando
 Link de pagamento sendo criado corretamente
 Resposta sempre em JSON

Dicas Importantes

Sempre teste primeiro com o endpoint /api/test-asaas
Verifique os logs no console do Replit
Confirme o ambiente (sandbox vs produ√ß√£o)
Valide o token na documenta√ß√£o do Asaas
Use HTTPS sempre em produ√ß√£o